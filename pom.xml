<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.6.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.version</groupId>
	<version>0.0.1-SNAPSHOT</version>
	<artifactId>net_service</artifactId>
	<packaging>jar</packaging>
	<name>net_service</name>
	<description> parent project </description>


	<properties>
		<docker.image.prefix>springio</docker.image.prefix>
		<image.name>net_service:0.0.1</image.name>
	</properties>
	<dependencies>



		<dependency>
			<groupId>org.jvnet.hudson</groupId>
			<artifactId>ganymed-ssh2</artifactId>
			<version>build210-hudson-1</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-redis</artifactId>
		</dependency>
		<!-- lettuce pool 缓存连接池 -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-pool2</artifactId>
			<version>2.5.0</version>
		</dependency>


			<dependency>
				<groupId>com.alibaba</groupId>
				<artifactId>fastjson</artifactId>
				<version>1.2.47</version>
			</dependency>
			<!-- https://mvnrepository.com/artifact/com.google.guava/guava -->
			<dependency>
			    <groupId>com.google.guava</groupId>
			    <artifactId>guava</artifactId>
			    <version>28.0-jre</version>
			</dependency>
			
			<dependency>
				<groupId>com.google.protobuf</groupId>
				<artifactId>protobuf-java</artifactId>
				<version>2.6.1</version>
			</dependency>
			
			
			<dependency>
				<groupId>org.apache.httpcomponents</groupId>
				<artifactId>httpclient</artifactId>
			
			</dependency>
			<!-- https://mvnrepository.com/artifact/org.quartz-scheduler/quartz -->
			<dependency>
				<groupId>org.quartz-scheduler</groupId>
				<artifactId>quartz</artifactId>
			
			</dependency>

			<!-- https://mvnrepository.com/artifact/org.springframework/spring-context-support -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context-support</artifactId>
			</dependency>

			<!-- https://mvnrepository.com/artifact/io.netty/netty-all -->
			<dependency>
				<groupId>io.netty</groupId>
				<artifactId>netty-all</artifactId>
			</dependency>
			 <dependency>
				<groupId>commons-io</groupId>
				<artifactId>commons-io</artifactId>
				<version>2.5</version>
			</dependency> 
			<!-- redis相关jar包 -->
		<!-- 	<dependency>
				<groupId>redis.clients</groupId>
				<artifactId>jedis</artifactId>
				<version>2.9.0</version>
			</dependency> -->
			<!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 -->
			<dependency>
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-lang3</artifactId>

			</dependency>
		
		
			<!-- #################################################### -->
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter</artifactId>
			
			</dependency>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-tomcat</artifactId>
				
			</dependency>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-web</artifactId>
			
			</dependency>
		<!-- 	<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-data-jpa</artifactId>
				<version>1.5.2.RELEASE</version>
			</dependency> -->
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-configuration-processor</artifactId>
			
				<optional>true</optional>
			</dependency>
			<!-- web network -->
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-websocket</artifactId>
			</dependency>
		<!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.18.8</version>
			<scope>provided</scope>
		</dependency>

		<!--<dependency>
			<groupId>org.mybatis.spring.boot</groupId>
			<artifactId>mybatis-spring-boot-starter</artifactId>
			<version>1.3.0</version>
		</dependency>-->
		<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.5.2</version>
		</dependency>


		<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
		<!--<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>2.0.2</version>
		</dependency>-->


		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-aop</artifactId>
		</dependency>
	</dependencies>



	<build>
		<plugins>
 			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>	
			</plugin>

			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.4.13</version>

				<executions>
					<!-- 绑定 mvn: clean package -->
					<execution>
						<id>build-image</id>
						<phase>package</phase>
						<goals>
							<goal>build</goal>
						</goals>
					</execution>
					<!-- 上传本地私库 -->
					<!-- <execution> <id>image-tag</id> <phase>package</phase>
						 <goals>

							 <goal>tag</goal> &lt;!&ndash;tag命令，相当于docker的tag命令&ndash;&gt;
						 </goals>
						 <configuration>
							 <image>${image.name}</image>  &lt;!&ndash;镜像名&ndash;&gt;
							 <newName>114.55.92.111:5000/${image.name}</newName> &lt;!&ndash;打的标签名&ndash;&gt;
						 </configuration>
					 </execution>
						<execution> <id>package-push</id>
							<phase>package</phase>
							<goals>
								<goal>push</goal> &lt;!&ndash;相当于docker的push命令&ndash;&gt;
							</goals>
							<configuration>
								<imageName>114.55.92.111:5000/${image.name}</imageName>&lt;!&ndash;要push的镜像名&ndash;&gt;
							</configuration>
						</execution>-->
				</executions>
				<configuration>

					<forceTags>true</forceTags><!--覆盖相同标签镜像 -->
					<imageName>${image.name}</imageName>  <!--指定镜像名称 仓库/镜像名:标签 -->
					<!-- <baseImage>openjdk-8-jdk-alpine</baseImage>指定基础镜像，相当于dockerFile中的FROM<image> -->
					<dockerHost>http://114.55.92.111:2375</dockerHost>  <!-- 指定仓库地址 -->
					<!-- <entryPoint>["java","-jar","/${project.build.finalName}.jar"]</entryPoint>
						容器启动执行的命令，相当于dockerFile的ENTRYPOINT -->
					<dockerDirectory>${project.basedir}/src/main/resources</dockerDirectory>   <!--dockerfile文件路径 -->
					<resources>
						<resource>
							<!-- 指定资源文件 -->
							<targetPath>/</targetPath>
							<!-- 指定要复制的目录路径，这里是当前目录 -->
							<directory>${project.build.directory}</directory>  <!-- 指定要复制的根目录，这里是target目录 -->
							<include>${project.build.finalName}.jar</include>  <!-- 指定需要拷贝的文件，这里指最后生成的jar包 -->
						</resource>
					</resources>
					<serverId>docker-hub</serverId>
				</configuration>
			</plugin>


			<!-- <plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<executions>
					<execution>
						<id>attach-source</id>
						要绑定到的生命周期的阶段 在verify之后，install之前执行下面指定的goal
						<phase>verify</phase>
						<goals>
							类似执行mvn source:jar
							<goal>jar-no-fork</goal>
						</goals>
					</execution>
				</executions>
			</plugin> -->
		</plugins>
	</build>
</project>